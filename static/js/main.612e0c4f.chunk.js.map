{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clicked","box","state","gameEnded","gameLocked","board","dataset","square","turn","innerText","classList","add","setState","winnerLine","totalMoves","result","checkWinner","winner","setTimeout","random","Math","floor","document","querySelectorAll","moves","i","length","console","log","playAgain","undefined","Array","fill","forEach","remove","_this2","react_default","a","createElement","id","onClick","e","target","className","data-square","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.612e0c4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n// @TODO: \n// Add 2 modes. Single player and multiplayer.\n  constructor() {\n    super();\n    this.state = {\n      winnerLine:'Let\\'s play...!',\n      winner: null,\n      turn: 'X',\n      gameLocked: false,\n      gameEnded: false,\n      board: Array(9).fill(''),\n      totalMoves: 0\n    };\n\n  }\n\n  clicked = (box) => {\n    \n    if(this.state.gameEnded || this.state.gameLocked) return;\n\n    if(this.state.board[box.dataset.square] === '') {\n      this.state.board[box.dataset.square] = this.state.turn;\n      box.innerText = this.state.turn;\n      \n      if(box.innerText === 'O'){\n       box.classList.add('AI-color');\n      }\n      this.state.turn = this.state.turn === 'X' ? 'O' : 'X';\n      \n      if(this.state.turn === 'X'){\n        this.setState({winnerLine:'Your Turn...!'});\n      }else{\n        this.setState({winnerLine:'AI is playing...!'})\n      }\n      this.state.totalMoves++;\n    }\n\n\n    var result = this.checkWinner();\n\n    if(result === 'X') {\n      this.state.gameEnded = true;\n      this.setState({\n        winner: 'X',\n        winnerLine: 'X wins the game!'\n      });\n    } else if(result === 'O') {\n      this.state.gameEnded = true;\n      this.setState({\n        winner: 'O',\n        winnerLine: 'O wins the game!'\n      });\n    } else if(result === 'draw') {\n      this.state.gameEnded = true;\n      this.setState({\n        winner: 'draw',\n        winnerLine: 'It\\'s draw!'\n      })\n    }\n    \n    if(this.state.turn === 'O' && !this.state.gameEnded) {\n      this.state.gameLocked = true;\n      setTimeout(()=> {\n        do {\n          var random = Math.floor(Math.random()*9);\n        } while(this.state.board[random] !== '');\n        this.state.gameLocked = false;\n        this.clicked(document.querySelectorAll('.square')[random]);\n      }, 300);\n    }\n  }\n\n  checkWinner = () => {\n    var moves = [[0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8]];\n    var board = this.state.board;\n    for(let i=0;i<moves.length;i++) {\n      if(board[moves[i][0]] === board[moves[i][1]] && board[moves[i][1]] === board[moves[i][2]])\n          return board[moves[i][0]];\n    }\n\n    console.log(this.state.totalMoves);\n    if(this.state.totalMoves === 9) {\n      return 'draw';\n    }\n  }\n\n  playAgain = () => {\n    this.setState({\n      winnerLine:'Let\\'s play...!',\n      winner: undefined,\n      turn: 'X',\n      gameLocked: false,\n      gameEnded: false,\n      board: Array(9).fill(''),\n      totalMoves: 0\n    });\n\n    let boxes = document.querySelectorAll('.square');\n    \n    boxes.forEach((box) =>{\n     box.innerText = '';\n     box.classList.remove('AI-color');\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"game\">\n          <div id=\"head\">\n              <span id=\"tic\">Tic</span>-<span id=\"tac\">Tac</span>-<span id=\"toe\">Toe</span> in <span id=\"react\">React</span>\n          </div>\n          <div id=\"board\" onClick={(e) => this.clicked(e.target)}>\n              <div className=\"square\" data-square=\"0\"></div>\n              <div className=\"square\" data-square=\"1\"></div>\n              <div className=\"square\" data-square=\"2\"></div>\n              <div className=\"square\" data-square=\"3\"></div>\n              <div className=\"square\" data-square=\"4\"></div>\n              <div className=\"square\" data-square=\"5\"></div>\n              <div className=\"square\" data-square=\"6\"></div>\n              <div className=\"square\" data-square=\"7\"></div>\n              <div className=\"square\" data-square=\"8\"></div>\n          </div>\n          <div id=\"status\">{this.state.winnerLine}</div>\n          {this.state.gameEnded ? <button className=\"play-btn\" onClick={ () => this.playAgain() }>Play Again</button> : ''}\n      </div>      \n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}